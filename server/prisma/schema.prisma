generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                  @id @default(cuid())
  username           String                  @unique
  password           String
  createdAt          DateTime                @default(now())
  isApproved         Boolean                 @default(false)
  birthdate          DateTime?
  email              String                  @unique
  name               String?
  role               Role                    @default(viewer)
  companyId          String?
  aiReviewLogs       AIReviewLog[]
  assignedApprovals  ApprovalRequest[]       @relation("AssignedApprovals")
  requestedApprovals ApprovalRequest[]       @relation("RequestedApprovals")
  approverLogs       ApprovedLog[]           @relation("ApproverUser")
  approvedLogs       ApprovedLog[]           @relation("ApprovedUser")
  files              File[]
//  narratives         Narrative[]
  projects           Project[]
  projectVersions    ProjectVersion[]
  assignedQuestions  Question[]              @relation("AssignedQuestions")
  assignedByLogs     QuestionAssignmentLog[] @relation("AssignedByLog")
  assignedToLogs     QuestionAssignmentLog[] @relation("AssignedToLog")
  company            Company?                @relation(fields: [companyId], references: [id])
}

model Company {
  id           String        @id @default(cuid())
  name         String        @unique
  isArchived   Boolean       @default(false)
  approvedLogs ApprovedLog[]
  files        File[]
  projects     Project[]
  users        User[]
}

model Project {
  id               String            @id @default(cuid())
  name             String
  description      String?
  createdAt        DateTime          @default(now())
  ownerId          String
  details          Json?
  companyId        String?
  deadlineDate     DateTime?
  isCompleted      Boolean           @default(false)
  status           String            @default("draft")
  isArchived       Boolean           @default(false)
  aiReviewLogs     AIReviewLog[]
  approvalRequests ApprovalRequest[]
//  narrative        Narrative?
  company          Company?          @relation(fields: [companyId], references: [id])
  owner            User              @relation(fields: [ownerId], references: [id])
  versions         ProjectVersion[]
  questions        Question[]
}

// model Narrative {
//  id        String   @id @default(cuid())
//  title     String
//  content   String
//  authorId  String
//  status    String   @default("draft")
//  createdAt DateTime @default(now())
//  projectId String   @unique
//  author    User     @relation(fields: [authorId], references: [id])
//  project   Project  @relation(fields: [projectId], references: [id])
//}

model ProjectVersion {
  id            String   @id @default(cuid())
  projectId     String
  versionNumber Int
  snapshot      Json
  createdAt     DateTime @default(now())
  createdById   String
  createdBy     User     @relation(fields: [createdById], references: [id])
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, versionNumber])
}

model ApprovedLog {
  id                String   @id @default(cuid())
  approvedUserId    String
  approvedByUserId  String
  approvedAt        DateTime @default(now())
  roleAssigned      Role
  companyAssignedId String?
  approvedBy        User     @relation("ApproverUser", fields: [approvedByUserId], references: [id])
  approvedUser      User     @relation("ApprovedUser", fields: [approvedUserId], references: [id])
  companyAssigned   Company? @relation(fields: [companyAssignedId], references: [id])
}

model File {
  id           String   @id @default(cuid())
  filename     String
  mimetype     String
  data         Bytes
  companyId    String
  uploadedById String
  createdAt    DateTime @default(now())
  company      Company  @relation(fields: [companyId], references: [id])
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
}

model AIReviewLog {
  id                    String   @id @default(cuid())
  projectId             String
  reviewedAt            DateTime @default(now())
  reviewedById          String
  aiResponse            String
  grantWebsite          String?
  grantPurposeStatement String?
  isArchived            Boolean  @default(false)
  project               Project  @relation(fields: [projectId], references: [id])
  reviewedBy            User     @relation(fields: [reviewedById], references: [id])
}

model ApprovalRequest {
  id            String    @id @default(cuid())
  projectId     String
  requestedById String
  approverId    String
  status        String    @default("pending")
  comments      String?
  requestedAt   DateTime  @default(now())
  respondedAt   DateTime?
  approver      User      @relation("AssignedApprovals", fields: [approverId], references: [id])
  project       Project   @relation(fields: [projectId], references: [id])
  requestedBy   User      @relation("RequestedApprovals", fields: [requestedById], references: [id])
}

model Question {
  id             String                  @id @default(cuid())
  projectId      String
  text           String
  assignedToId   String?
  status         String                  @default("pending")
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  answer         String?
  limitUnit      String?
  maxLimit       Int?
  assignedTo     User?                   @relation("AssignedQuestions", fields: [assignedToId], references: [id])
  project        Project                 @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignmentLogs QuestionAssignmentLog[]
}

model QuestionAssignmentLog {
  id           String   @id @default(cuid())
  questionId   String
  assignedById String?
  assignedToId String
  assignedAt   DateTime @default(now())
  assignedBy   User?    @relation("AssignedByLog", fields: [assignedById], references: [id])
  assignedTo   User     @relation("AssignedToLog", fields: [assignedToId], references: [id])
  question     Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

enum Role {
  viewer
  editor
  admin
  approver
}
