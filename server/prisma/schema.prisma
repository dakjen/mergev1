// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  viewer
  editor
  admin
  approver
}

model User {
  id        String     @id @default(cuid())
  username  String   @unique
  password  String
  name      String?
  birthdate DateTime?
  email     String   @unique
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
  role      Role     @default(viewer)
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  narratives Narrative[]
  projects   Project[]
  projectVersions ProjectVersion[]
  approvedLogs ApprovedLog[] @relation("ApprovedUser")
  approverLogs ApprovedLog[] @relation("ApproverUser")
  files       File[] // Add relation to File model
  aiReviewLogs AIReviewLog[] // New relation to AIReviewLog model
}

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  isArchived Boolean @default(false)
  users     User[]
  projects  Project[]
  approvedLogs ApprovedLog[]
  files       File[] // Add relation to File model
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String? 
  details Json?
  deadlineDate DateTime? // New field for project deadline
  createdAt   DateTime  @default(now())
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     String
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id])
  versions    ProjectVersion[]
  aiReviewLogs AIReviewLog[] // New relation to AIReviewLog model
}

model Narrative {
  id        String     @id @default(cuid())
  title     String
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  status    String   @default("draft")
  createdAt DateTime @default(now())
}

model ProjectVersion {
  id            String    @id @default(cuid())
  projectId     String
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  versionNumber Int
  snapshot      Json
  createdAt     DateTime  @default(now())
  createdBy     User      @relation(fields: [createdById], references: [id])
  createdById   String

  @@unique([projectId, versionNumber])
}

model ApprovedLog {
  id                String    @id @default(cuid())
  approvedUser      User      @relation("ApprovedUser", fields: [approvedUserId], references: [id])
  approvedUserId    String
  approvedBy        User      @relation("ApproverUser", fields: [approvedByUserId], references: [id])
  approvedByUserId  String
  approvedAt        DateTime  @default(now())
  roleAssigned      Role
  companyAssigned   Company?  @relation(fields: [companyAssignedId], references: [id])
  companyAssignedId String?
}

// New File model for storing files directly in the database
model File {
  id          String    @id @default(cuid())
  filename    String
  mimetype    String
  data        Bytes     // Stores the actual file content
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])
  uploadedBy  User      @relation(fields: [uploadedById], references: [id])
  uploadedById String
  createdAt   DateTime  @default(now())
}

// New AIReviewLog model to record AI reviews
model AIReviewLog {
  id                    String    @id @default(cuid())
  projectId             String
  project               Project   @relation(fields: [projectId], references: [id])
  reviewedAt            DateTime  @default(now())
  reviewedById          String
  reviewedBy            User      @relation(fields: [reviewedById], references: [id])
  aiResponse            String    @db.Text // Store potentially long AI responses
  grantWebsite          String?
  grantPurposeStatement String?
}
